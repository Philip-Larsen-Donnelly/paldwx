---
# === DHIS 2 home =========
- include: dhis2_home.yml
- include: nginx_config.yml

  # handler to restart tomcat?
# =========================

# === PostgreSQL ==========
- name: Ensure PostgreSQL users are present for {{ inventory_hostname }}/{{ instance.name }}
  postgresql_user:
    name: "{{ instance.db_owner | default(dhis2_db_owner_default) }}"
    password: "{{ instance.db_owner_password | default(dhis2_db_owner_password_default) }}"
    state: present
  become: true
  become_user: "{{ postgresql_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true

# =========================

# stop the instance if running (using the server scripts)
# - include: dhis2_services.yml op="stop-instance"

# - name: stop the instance
#   command: "{{ storage }}/instances/{{ instance.name }}/tomcat/bin/shutdown.sh"
#   become: yes
#   become_user: "{{ dhis2_user }}"
#   ignore_errors: yes


# === Deploy WAR ==============
- include: deploy_war.yml

# === Restore DB ==============
- include: restore_database.yml
# =========================

# =========================
# start the instance (using the server scripts)
# - include: dhis2_services.yml op="start-instance"

- name: start the {{ inventory_hostname }}/{{ instance.name }} instance
  systemd:
    state: started
    name: dhis2-{{ instance.name }}


- name: remove redirect from nginx config
  blockinfile:
    path: "/etc/nginx/conf.d/default.conf"
    block: |
        location /{{ instance.name }} {
            proxy_pass                http://127.0.0.1:{{ instance.tomcat_port }}/{{ instance.name }};
            proxy_redirect            off;
            proxy_set_header          Host               $host;
            proxy_set_header          X-Real-IP          $remote_addr;
            proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header          X-Forwarded-Proto  https;
            #proxy_cache               dhis;
        }
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ instance.name }}"
    insertbefore: "# END DHIS2-INSTANCES:"
    state: "{{ instance.state }}"
  notify: reload nginx

- name: reload nginx
  systemd:
    state: reloaded
    name: nginx

# add to prometheus scrape config if monitoring is on- name: remove redirect from nginx config
- name: add scraper to prometheus
  blockinfile:
    path: "{{ prometheus_config_dir }}/prometheus.yml"
    block: |
        - job_name: '{{ instance.name }}'
          metrics_path: '/dhis/api/metrics'
          basic_auth:
            username: "{{ dhis2_admin_user }}"
            password: "{{ dhis2_admin_user_password }}"
          static_configs:
            - targets: ['localhost:9090']
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ instance.name }}"
    insertbefore: "# END DHIS2-INSTANCES:"
    state: "{{ instance.state }}"
  notify: reload prometheus
  when: instance.dhis2_monitoring == 'YES'


- name: wait for instance {{ inventory_hostname }}/{{ instance.name }} to start in order to run analytics
  uri:
    url: https://{{ inventory_hostname }}/{{ instance.name }}/api/resourceTables/analytics
    method: POST
    user: "{{ dhis2_admin_user }}"
    password: "{{ dhis2_admin_user_password }}"
    force_basic_auth: yes
    status_code: 200
  register: result
  until: result.status == 200
  retries: 90
  delay: 10
  when: instance.db_demo is defined and instance.db_demo|length
