---
# Deploy in parallel on tomcat - not entirely sure we want to do this as it could cause corruption due to flyway changes?!

# - name: get next version for war file
#   shell: "version=`find {{ storage }}/instances/{{ instance.name }}/tomcat/webapps/ -maxdepth 1 -name '{{ instance.name }}##*.war' | sort | tail -n1 | sed -n 's/.*##0*\\(.*\\)\\.war/\\1/p'` ;   printf %04d $((version+1))"
#   register: next_instance_version
#
# - name: deploy war file as next version
#   get_url:
#     url: "{{ instance.war_file }}"
#     dest: "{{ storage }}/instances/{{ instance.name }}/tomcat/webapps/{{ instance.name }}##{{ next_instance_version.stdout }}.war"
#     mode: 0644

# check if we need to do anything:
# make a temporary file for the war:
- name: create temporary file
  tempfile:
    state: file
    suffix: war
  register: temp_war

- name: get the current date time
  set_fact: war_date="{{lookup('pipe','date \"+%Y-%m-%d %H:%M:%S.%3N\"')}}"

- name: set the context name
  set_fact: context_path="{{ instance.cluster_name if instance.cluster_name is defined else instance.name }}"

# - name: check context_path
#   debug: msg="context_path is {{ context_path }}"

- name: download the latest war file to temporary file
  get_url:
    url: "{{ instance.war_file }}"
    dest: "{{ temp_war.path }}"
    mode: 0644
    force: yes

# get checksum of new war file
- name: get checksum of new war file
  stat:
    path: "{{ temp_war.path }}"
    get_checksum: yes
  register: new_war

# get checksum of current war file
- name: get checksum of current war file
  stat:
    path: "{{ storage }}/instances/{{ instance.name }}/tomcat/webapps/{{ context_path }}.war"
    get_checksum: yes
  register: current_war

- name: The war needs an update
  block:
  - name: add redirect to nginx config
    blockinfile:
      path: "/etc/nginx/dhis2_instances"
      block: |
          location /{{ instance.name }} {
              rewrite ^ /{{ instance.name }}_deploy_war/ ;
          }
          location /{{ instance.name }}_deploy_war {
              alias /usr/share/nginx/html;
              index deploy_war.html break;
          }
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ instance.name }}"
      state: "{{Â instance.state }}"
    notify: reload nginx

  - name: reload nginx
    systemd:
      state: reloaded
      name: nginx

  - name: stop the instance
    systemd:
      state: stopped
      name: dhis2-{{ instance.name }}

  - name: deploy the war file
    copy:
      src: "{{ temp_war.path }}"
      dest: "{{ storage }}/instances/{{ instance.name }}/tomcat/webapps/{{ context_path }}.war"
      remote_src: yes

  - name: update the facts with the install datetime
    lineinfile:
      dest: "{{ storage }}/instances/{{ instance.name }}/home/instance.fact"
      regexp: "^war_date=.+$"
      line: "war_date={{ war_date }}"

  # - name: update the json facts with the install datetime
  #   lineinfile:
  #     dest: "{{ storage }}/instances/{{ instance.name }}/home/instance.fact.json"
  #     regexp: "^  \"war_date\":.+$"
  #     line: "  \"war_date\": {{ war_date }},"



  - name: update the facts
    set_fact:
      instance_update: "{{ instance_update | default(instance) | combine({item.name: item.value}) }}"
    with_items:
      - { name: war_date , value: "{{ war_date | default('') }}" }
      - { name: installed_by , value: "{{ awx_user_name | default('unknown') }}" }

  - name: update displayed facts
    include: factualise_instance.yml

  when: new_war.stat.checksum != current_war.stat.checksum|d('')

- name: delete the temp file
  file:
    path: "{{ temp_war.path }}"
    state: absent

- name: clear the directory to extract war file to
  ansible.builtin.file:
    path: "{{ storage }}/instances/{{ instance.name }}/tomcat/webapps/{{ context_path }}"
    state: absent

- name: create the directory to extract war file to
  ansible.builtin.file:
    path: "{{ storage }}/instances/{{ instance.name }}/tomcat/webapps/{{ context_path }}"
    state: directory

- name: Ensure unzip is installed.
  package: name="unzip" state=present

- name: Extract war flle
  ansible.builtin.unarchive:
    src: "{{ storage }}/instances/{{ instance.name }}/tomcat/webapps/{{ context_path }}.war"
    dest: "{{ storage }}/instances/{{ instance.name }}/tomcat/webapps/{{ context_path }}"
    remote_src: yes

- name: delete the war file
  file:
    path: "{{ storage }}/instances/{{ instance.name }}/tomcat/webapps/{{ context_path }}.war"
    state: absent

- name: Change file ownership, group and permissions
  ansible.builtin.file:
    path: "{{ storage }}/instances/{{ instance.name }}/tomcat/webapps"
    state: directory
    recurse: yes
    owner: root
    group: "{{ dhis2_user | default('dhis') }}"
    mode: '0650'

# Here we adapt the Java environment
# If a jdk_version is defined, we will use that
# If not, we will try to pull the correct version from the META-INF/MANIFEST.MF file in the exploded war
# If neither of the above we will default back to JDK 11
- name: Ensure the JAVA_HOME environment is set to the correct Java version for the war file
  block:

  - name: extract Build-Jdk-Spec from file
    slurp:
      src: "{{ storage }}/instances/{{ instance.name }}/tomcat/webapps/{{ context_path }}/META-INF/MANIFEST.MF"
    register: mymanifest
    ignore_errors: true

  - name: Set build_jdk_spec
    set_fact:
      build_jdk_spec: "{{ mymanifest['content'] | b64decode | regex_findall('Build-Jdk.*: *([0-9.]+)') | first | regex_replace('^1\.','') | regex_replace('\..*$','')  }}"
    ignore_errors: true
    when: mymanifest.failed == false

  when: jdk_version is not defined

- name: Check if the implied jdk_path exists
  stat:
    path: "/usr/lib/jvm/java-{{ jdk_version | default(build_jdk_spec) | default(11) }}-openjdk-amd64"
  register: jdk_path

- name: Update Java environment to match the implied jdk_path
  lineinfile:
    path: "/etc/systemd/system/dhis2-{{ instance.name }}.service"
    regexp: "Environment='JAVA_HOME="
    line: "Environment='JAVA_HOME={{ jdk_path.stat.path }}'"
  register: serviceupdate
  when: jdk_path.stat.exists

- name: force systemd to reread configs
  systemd:
    daemon_reload: yes
  when: serviceupdate.changed
