---
# download the demo db (if not empty param)
- name: get the current date time
  set_fact: db_date="{{lookup('pipe','date \"+%Y-%m-%d %H:%M:%S.%3N\"')}}"

- name: check for snapshot
  block:
    - name: Get available snapshots from S3
      aws_s3:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        bucket: dhis2-database-backups
        mode: list
        prefix: "{{ ansible_host }}/{{ instance_name }}/"
      register: s3_list

    - name: Get most recent snapshot
      set_fact:
        s3_snapshot: "{{ s3_list.s3_keys[-1] }}"
      when: s3_list.s3_keys
  when: restore_snapshot is defined and restore_snapshot == "if_available"

- name: fetch the snapshot db
  block:
    - name: fetch demo db file for snapshot
      aws_s3:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        bucket: dhis2-database-backups
        object: "{{ s3_snapshot }}"
        dest: "{{ storage }}/instances/{{ instance.name }}/demo_db.sql.gz"
        mode: get
  when: s3_snapshot is defined

- name: fetch the baseline db
  block:
    - name: fetch demo db file for project
      aws_s3:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        bucket: dhis2-database-development
        object: "{{ instance.db_demo }}"
        dest: "{{ storage }}/instances/{{ instance.name }}/demo_db.sql.gz"
        mode: get
      when: project is defined and instance.db_demo is defined and instance.db_demo|length

    - name: fetch demo db file for {{ instance.name }}
      get_url:
        url: "{{ instance.db_demo }}"
        dest: "{{ storage }}/instances/{{ instance.name }}/demo_db.sql.gz"
        mode: 0644
      when: project is not defined and instance.db_demo is defined and instance.db_demo|length
  when: s3_snapshot is not defined



# - name: unzip the demo db
#   command: gunzip -f {{ storage }}/instances/{{ instance.name }}/demo_db.sql.gz
#   when: instance.db_demo is defined and instance.db_demo|length
#

- name: add redirect to nginx config
  blockinfile:
    path: "/etc/nginx/conf.d/default.conf"
    block: |
        location /{{ instance.name }} {
            rewrite ^ /{{ instance.name }}_restore_db/ ;
        }
        location /{{ instance.name }}_restore_db {
            alias /usr/share/nginx/html;
            index restore_db.html break;
        }
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ instance.name }}"
    insertbefore: "# END DHIS2-INSTANCES:"
    state: "{{Â instance.state }}"
  notify: reload nginx

- name: reload nginx
  systemd:
    state: reloaded
    name: nginx

- name: stop the instance
  systemd:
    state: stopped
    name: dhis2-{{ instance.name }}

- name: remove db {{ instance.name }}
  include: databases.yml
  vars:
    postgresql_databases:
      - name: "{{ instance.db_name }}"
        owner: "{{ instance.db_owner | default('dhis') }}"
        state: absent

- name: create db {{ instance.name }}
  include: databases.yml
  vars:
    postgresql_databases:
      - name: "{{ instance.db_name }}"
        owner: "{{ instance.db_owner | default('dhis') }}"
        state: "{{ instance.state | default('present')  }}"

- name: Restore to DB {{ instance.db_name }} for {{ instance.name }}
  postgresql_db:
    name: "{{ instance.db_name }}"
    state: restore
    target: "{{ storage }}/instances/{{ instance.name }}/demo_db.sql.gz"
  become: true
  become_user: "{{ postgresql_user }}"
  when: instance.db_demo is defined and instance.db_demo|length

- name: Execute SQL - force admin password
  postgresql_query:
    db: "{{ instance.db_name }}"
    query: UPDATE users SET password = %s WHERE username = %s
    positional_args:
    - '{{ dhis2_admin_user_password_hash }}'
    - '{{ dhis2_admin_user }}'
  become: true
  become_user: "{{ postgresql_user }}"
  when: dhis2_admin_user_password_hash is defined


# - name: Execute SQL - make sure all users have up-to-date password
#   shell: "psql -d {{ instance.db_name }} -c 'UPDATE users SET passwordlastupdated = \"{{ db_date }}\"'"
#   become: true
#   become_user: "{{ postgresql_user }}"

- name: remove temporary demo db file
  file:
    path: "{{ storage }}/instances/{{ instance.name }}/demo_db.sql"
    state: absent


- name: update the facts with the install datetime
  lineinfile:
    dest: "{{ storage }}/instances/{{ instance.name }}/home/instance.fact"
    regexp: "^db_date=.+$"
    line: "db_date={{ db_date }}"

#
# - name: update the json facts with the install datetime
#   lineinfile:
#     dest: "{{ storage }}/instances/{{ instance.name }}/home/instance.fact.json"
#     regexp: "^  \"db_date\":.+$"
#     line: "  \"db_date\": {{ db_date }},"
#   ignore_errors: yes



- name: update the facts
  set_fact:
    instance_update: "{{ instance_update | default(instance) | combine({item.name: item.value}) }}"
  with_items:
    - { name: db_date , value: "{{ db_date | default('') }}" }
    - { name: db_owner , value: "{{ instance.db_owner | default('dhis') }}" }

- name: update displayed facts
  include: factualise_instance.yml


# - name: wait for instance to start in order to run analytics
#   uri:
#     url: "https://{{ inventory_hostname }}/{{ instance.name }}"
#     status_code: 200
#   register: result
#   until: result.status == 200
#   retries: 90
#   delay: 10
