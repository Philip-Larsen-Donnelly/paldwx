---

# download the demo db (if not empty param)
- name: get the current date time
  set_fact: db_date="{{lookup('pipe','date \"+%Y-%m-%d %H:%M:%S.%3N\"')}}"

- name: check for snapshot
  block:
    - name: Get available snapshots from S3
      aws_s3:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        bucket: dhis2-database-backups
        mode: list
        prefix: "{{ ansible_host }}/{{ instance_name }}/"
      register: s3_list

    - name: Get most recent snapshot
      set_fact:
        s3_snapshot: "{{ s3_list.s3_keys[-1] }}"
      when: s3_list.s3_keys
  when: restore_snapshot is defined and restore_snapshot == "latest"

- debug:
    msg: "{{ s3_snapshot }}"
  when: s3_snapshot is defined

- name: fetch the snapshot db
  block:
    - name: store db fetch format
      set_fact:
        this_fetch_format: "{{ 'pgc' if s3_snapshot is regex('.*pgc') else 'sql.gz' }}"

    - name: fetch demo db file for snapshot
      aws_s3:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        bucket: dhis2-database-backups
        object: "{{ s3_snapshot }}"
        dest: "{{ storage }}/instances/{{ instance.name }}/temp_db.{{ this_fetch_format }}"
        mode: get
  when: s3_snapshot is defined

- name: fetch the baseline db
  block:

# -- if "favour_pgc_format" is chosen, then make sure that format is available before forcing
    - name: favour pgc format if selected
      block:
      - name: for projects
        block:
        - name: check for pgc format
          aws_s3:
            aws_access_key: "{{ aws_access_key }}"
            aws_secret_key: "{{ aws_secret_key }}"
            bucket: dhis2-database-development
            object: "{{ instance.db_demo | replace('.sql.gz','.pgc') }}"
            expiration: 86400
            mode: geturl
          register: pgc_link
          ignore_errors: yes

        - name: passed
          set_fact:
            force_pgc: True
          when: not pgc_link.failed

        when:
          - (project is defined)

      - name: for non projects
        block:
        - name: check for pgc format
          uri:
            url: "{{ instance.db_demo | replace('.sql.gz','.pgc') }}"
            method: HEAD
          register: pgc_link
          ignore_errors: yes

        - name: passed
          set_fact:
            force_pgc: True
          when: not pgc_link.failed

        when:
          - (project is not defined) or project == ''

      when:
        - favour_pgc_format|default(false)|bool
# -- end pgc format check

    - name: force pgc fetch format
      set_fact:
        this_fetch_format: "pgc"
      when: force_pgc|default(false)|bool

    - name: store db fetch format based on extension
      set_fact:
        this_fetch_format: "{{ 'pgc' if instance.db_demo is regex('.*pgc') else 'sql.gz' }}"
      when: force_pgc|default(false)|bool == false

    - name: fetch demo db file for project
      aws_s3:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        bucket: "{{ dhis2_project_database_bucket }}"
        object: "{{ instance.db_demo | replace('sql.gz',this_fetch_format) }}"
        dest: "{{ storage }}/instances/{{ instance.name }}/temp_db.{{ this_fetch_format }}"
        mode: get
      when: (project is defined) and (project|length > 0) and instance.db_demo is defined and instance.db_demo|length

    - name: fetch demo db file for {{ instance.name }}
      get_url:
        url: "{{ instance.db_demo | replace('sql.gz',this_fetch_format) }}"
        dest: "{{ storage }}/instances/{{ instance.name }}/temp_db.{{ this_fetch_format }}"
        mode: 0644
      when: (not project) and instance.db_demo is defined and instance.db_demo|length
  when: s3_snapshot is not defined
  rescue:
    - set_fact: db_empty=true



# - name: unzip the demo db
#   command: gunzip -f {{ storage }}/instances/{{ instance.name }}/temp_db.{{ db_dump_format }}
#   when: instance.db_demo is defined and instance.db_demo|length
#
-

- name: add redirect to nginx config
  blockinfile:
    path: "/etc/nginx/dhis2_instances"
    block: |
        location /{{ instance.name }} {
            rewrite ^ /{{ instance.name }}_restore_db/ ;
        }
        location /{{ instance.name }}_restore_db {
            alias /usr/share/nginx/html;
            index restore_db.html break;
        }
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ instance.name }}"
    state: "{{Â instance.state }}"
  notify: reload nginx

- name: reload nginx
  systemd:
    state: reloaded
    name: nginx

- name: stop the instance
  systemd:
    state: stopped
    name: dhis2-{{ instance.name }}

- name: remove db {{ instance.name }}
  include: databases.yml
  vars:
    postgresql_databases:
      - name: "{{ instance.db_name }}"
        owner: "{{ instance.db_owner | default('dhis') }}"
        port: "{{ postgresql_port_map[instance.postgresql_version] | default(omit) }}"
        state: absent

- name: create db {{ instance.name }}
  include: databases.yml
  vars:
    postgresql_databases:
      - name: "{{ instance.db_name }}"
        owner: "{{ instance.db_owner | default('dhis') }}"
        port: "{{ postgresql_port_map[instance.postgresql_version] | default(omit) }}"
        state: "{{ instance.state | default('present')  }}"

- name: Drop schema "public" if importing from pgc
  community.postgresql.postgresql_schema:
    db: "{{ instance.db_name }}"
    name: public
    state: absent
    cascade_drop: yes
    port: "{{ postgresql_port_map[instance.postgresql_version] | default(omit) }}"
  become: true
  become_user: "{{ postgresql_user }}"
  when:
    - this_fetch_format == 'pgc'
    - postgresql_version == '13'

- name: Restore to DB {{ instance.db_name }} for {{ instance.name }}
  community.postgresql.postgresql_db:
    name: "{{ instance.db_name }}"
    port: "{{ postgresql_port_map[instance.postgresql_version] | default(omit) }}"
    state: restore
    target: "{{ storage }}/instances/{{ instance.name }}/temp_db.{{ this_fetch_format }}"
    target_opts: "{{ restore_options }}"
  become: true
  become_user: "{{ postgresql_user }}"
  vars:
    ansible_ssh_pipelining: true
    multithread: "-j {{ db_restore_threads }} "
    restore_options: "{{ multithread if (this_fetch_format == 'pgc') else '' }}"
  when: (instance.db_demo is defined and instance.db_demo|length and db_empty is not defined) or
        (s3_snapshot is defined)

- name: Execute SQL - force admin password
  postgresql_query:
    port: "{{ postgresql_port_map[instance.postgresql_version] | default(omit) }}"
    db: "{{ instance.db_name }}"
    query: UPDATE users SET password = %s WHERE username = %s
    positional_args:
    - '{{ dhis2_admin_user_password_hash }}'
    - '{{ dhis2_admin_user }}'
  become: true
  become_user: "{{ postgresql_user }}"
  vars:
    ansible_ssh_pipelining: true
  when: dhis2_admin_user_password_hash is defined

- name: Execute SQL - fix sharing for COs
  postgresql_query:
    port: "{{ postgresql_port_map[instance.postgresql_version] | default(omit) }}"
    db: "{{ instance.db_name }}"
    query: UPDATE dataelementcategoryoption SET publicaccess = 'rwrw----'
  become: true
  become_user: "{{ postgresql_user }}"
  vars:
    ansible_ssh_pipelining: true
  when: co_access_fix is defined


# - name: Execute SQL - make sure all users have up-to-date password
#   shell: "psql -d {{ instance.db_name }} -c 'UPDATE users SET passwordlastupdated = \"{{ db_date }}\"'"
#   become: true
#   become_user: "{{ postgresql_user }}"

- name: remove temporary db file
  file:
    path: "{{ storage }}/instances/{{ instance.name }}/temp_db.{{ this_fetch_format | default('sql.gz') }}"
    state: absent

- name: remove old temporary db file
  file:
    path: "{{ storage }}/instances/{{ instance.name }}/demo_db.{{ this_fetch_format | default('sql.gz') }}"
    state: absent


- name: update the facts with the install datetime
  lineinfile:
    dest: "{{ storage }}/instances/{{ instance.name }}/home/instance.fact"
    regexp: "^db_date=.+$"
    line: "db_date={{ db_date }}"

- name: update the facts with correct DB format (if necessary)
  lineinfile:
    dest: "{{ storage }}/instances/{{ instance.name }}/home/instance.fact"
    regexp: "^db_demo=.+$"
    line: "db_demo={{ instance.db_demo | replace('sql.gz',this_fetch_format) }}"
  when: (instance.db_demo | replace('sql.gz',this_fetch_format)) != instance.db_demo

#
# - name: update the json facts with the install datetime
#   lineinfile:
#     dest: "{{ storage }}/instances/{{ instance.name }}/home/instance.fact.json"
#     regexp: "^  \"db_date\":.+$"
#     line: "  \"db_date\": {{ db_date }},"
#   ignore_errors: yes



- name: update the facts
  set_fact:
    instance_update: "{{ instance_update | default(instance) | combine({item.name: item.value}) }}"
  with_items:
    - { name: db_date , value: "{{ db_date | default('') }}" }
    - { name: db_owner , value: "{{ instance.db_owner | default('dhis') }}" }
    - { name: db_demo , value: "{{ instance.db_demo | replace('sql.gz',this_fetch_format) }}" }

- name: update displayed facts
  include: factualise_instance.yml


# - name: wait for instance to start in order to run analytics
#   uri:
#     url: "https://{{ inventory_hostname }}/{{ instance.name }}"
#     status_code: 200
#   register: result
#   until: result.status == 200
#   retries: 90
#   delay: 10
