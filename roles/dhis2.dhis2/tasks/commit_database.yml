---
- file:
    path: "{{ storage }}/tmp"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_user }}"
    recurse: yes
    state: "directory"

# download the demo db (if not empty param)
- name: get the current date time
  set_fact: db_snap_date="{{lookup('pipe','date \"+%Y-%m-%d_%H%M%S\"')}}"

- name: store db commit format
  set_fact:
    commit_dump_format: "{{ 'pgc' if instance.db_demo is regex('.*pgc') else 'sql.gz' }}"

- name: Dump database snapshot (without analytics) to a file (with compression)
  postgresql_db:
    name: "{{ instance.db_name }}"
    state: dump
    target: "{{ storage }}/tmp/{{ db_snap_date }}_{{ instance.name }}.{{ commit_dump_format }}"
    target_opts: "-T analytics* -T _*"
  become: true
  become_user: "{{ postgresql_user }}"
  vars:
    ansible_ssh_pipelining: true
  when: instance.db_demo is defined and instance.db_demo|length
  # not sure I need the "when" above - it might prevent snapshotting an instance started from empty.

- name: commit the snapshot to s3
  aws_s3:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ dhis2_project_database_bucket }}"
    object: "{{ instance.db_demo }}"
    src: "{{ storage }}/tmp/{{ db_snap_date }}_{{ instance.name }}.{{ commit_dump_format }}"
    mode: put
    metadata:
      saved_by: "{{ awx_user_name | default('unknown') }}"
      comment: "{{ db_commit_comment | default('none') }}"
      original_source: "{{ instance.db_demo }}"
      war_file: "{{ instance.war_file }}"

- name: copy the commited DB to s3 latest too when managing demo DBs.
  aws_s3:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ dhis2_project_database_bucket }}"
    object: "{{ db_dev_demo }}"
    src: "{{ storage }}/tmp/{{ db_snap_date }}_{{ instance.name }}.{{ commit_dump_format }}"
    mode: put
    metadata:
      saved_by: "{{ awx_user_name | default('unknown') }}"
      comment: "{{ db_commit_comment | default('none') }}"
      original_source: "{{ instance.db_demo }}"
      war_file: "{{ instance.war_file }}"
  when:
    - project == "sierra-leone"
    - db_dev_demo is defined
    - db_dev_demo != instance.db_demo


- name: remove local dump file
  file:
    path: "{{ storage }}/tmp/{{ db_snap_date }}_{{ instance.name }}.{{ commit_dump_format }}"
    state: absent
