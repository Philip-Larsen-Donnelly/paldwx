---
- debug:
    msg: "{{ instance }}"

- name: facts holder
  set_fact:
    instance_update: "{{ instance }}"

- name: set the instance locations
  set_fact:
    dhis2_filestore: "{{ instance.filestore | default(local_filestore) }}"

- name: set the instance locations
  set_fact:
    storage: "{{ storage_path | default('/var/lib') }}"
    dhis2_filestore: "{{ instance.filestore | default(local_filestore) }}"
    fs_type: "{{ dhis2_filestore.type }}"


- name: Migrate nginx config
  shell: sed -n '/BEGIN DHIS2-INSTANCES/,/END DHIS2-INSTANCES/p' /etc/nginx/conf.d/default.conf > /etc/nginx/dhis2_instances; sed -i '/# .*DHIS2-INSTANCES/d'  /etc/nginx/dhis2_instances
  args:
    creates: /etc/nginx/dhis2_instances


- name: configure nginx
  template:
    src: "nginx{{ dhis2_nginx }}.dhis.conf.j2"
    dest: "/etc/nginx/conf.d/default.conf"
    mode: 0644
    force: yes
  notify: reload nginx

- name: configure im instances in nginx
  template:
    src: "instance_manager_overrides.j2"
    dest: "/etc/nginx/im_instances"
    mode: 0644
    force: yes
  notify: reload nginx

- include: copy_lander.yml

- include: glowroot.yml
  when:
    - instance.glowroot_port is defined
    - dhis2_user is defined

# === install rate limiter config if defined
# create a directory if it doesn't exist
- block:
  - file:
      path: "{{ storage }}/instances/{{ instance.name }}/home/rate-limiter"
      state: directory
      mode: 0755

  - name: install the rate limiter config
    template:
      src: "rate-limiter-config.j2"
      dest: "{{ storage }}/instances/{{ instance.name }}/home/rate-limiter/config.yml"
      mode: 0644

  - name: add the rate limiter to tomcat startup
    lineinfile:
      path: "{{ storage }}/instances/{{ instance.name }}/tomcat/bin/startup.sh"
      regexp: '.*rate-limiter.*'
      insertbefore: '^exec.*'
      line: "(cd {{ storage }}/instances/{{ instance.name }}/home/rate-limiter; go-rate-limit)&"
      state: "{{ set_state }}"
    vars:
      set_state: "{{ 'absent' if rate_limiter_config == 'OFF' else 'present' }}"

  - name:
    file:
      path: "{{ storage }}/instances/{{ instance.name }}/home/rate-limiter/config.yml"
      state: absent
    when: rate_limiter_config == 'OFF'

  when: rate_limiter_config is defined and rate_limiter_config|length != 0

- name: Set rate limiting flag
  stat:
    path: "{{ storage }}/instances/{{ instance.name }}/home/rate-limiter/config.yml"
  register: rate_limit_check


# === repair flyway if necessary  (flyway.repair_before_migration=true)
- name: set flyway repair flag
  lineinfile:
    path: "{{ storage }}/instances/{{ instance.name }}/home/dhis.conf"
    regexp: '^flyway.repair_before_migration'
    line: flyway.repair_before_migration=true
  when:
    - flyway_repair is defined
    - flyway_repair | bool




# === Stop instance ==========
# stop the instance if running
- name: stop the instance
  systemd:
    state: stopped
    enabled: no
    name: dhis2-{{ instance.name }}
  ignore_errors: yes
  when: instance_action in ["stop", "develop_mode_on", "develop_mode_off"]



# ===  Move WAR
- name: move the war file
  include: dev_mode.yml
  when: instance_action in ["develop_mode_on", "develop_mode_off"]



- name: Dev Mode Check
  stat:
    path: "{{ storage }}/instances/{{ instance.name }}/tomcat/webapps/dev#{{ instance.name }}"
  register: dev_mode_check

# - name: Task name
#   debug:
#     msg: "The file or directory exists"
#   when: register_name.stat.exists

- name: add redirect to nginx config
  blockinfile:
    path: "/etc/nginx/dhis2_instances"
    block: |
        location /{{ instance.name }} {
            rewrite ^ /{{ instance.name }}_stopped/ ;
        }
        location /{{ instance.name }}_stopped {
            alias /usr/share/nginx/html;
            index stopped.html break;
        }
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ instance.name }}"
    state: "{{ instance.state }}"
  notify: reload nginx
  when: instance_action == "stop" and
        dev_mode_check.stat.islnk is not defined

- name: add dev redirect to nginx config
  blockinfile:
    path: "/etc/nginx/dhis2_instances"
    block: |
        location /{{ instance.name }} {
            alias /usr/share/nginx/html;
            index under_development.html break;
        }
        location /dev/{{ instance.name }} {
            proxy_pass                http://127.0.0.1:{{ instance.tomcat_port }}/dev/{{ instance.name }};
            proxy_redirect            off;
            proxy_set_header          Host               $host;
            proxy_set_header          X-Real-IP          $remote_addr;
            proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header          X-Forwarded-Proto  https;
            #proxy_cache               dhis;
        }
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ instance.name }}"
    state: "{{ instance.state }}"
  notify: reload nginx
  when: instance_action == "develop_mode_on"

# ===  Reset WAR
- name: re-deploy the war file
  include: deploy_war.yml
  when: instance_action in ["reset_war", "reset_war_and_db"] and
        dev_mode_check.stat.islnk is not defined

- name: re-deploy the war file (dev_mode)
  include: deploy_war_dev_mode.yml
  when: instance_action in ["reset_war", "reset_war_and_db"] and
        dev_mode_check.stat.islnk is defined

# ===  Save a DB snapshot to s3
- name: save a DB snapshot to s3
  include: save_snapshot.yml
  when: instance_action == "save_snapshot"

# ===  Restore a DB snapshot from s3
- name: restore a DB snapshot from s3
  set_fact:
    restore_snapshot: "latest"
  when: instance_action == "restore_snapshot"

# ===  commit DB as latest
- name: save a DB snapshot to s3
  include: commit_database.yml
  when: instance_action == "commit_db"

# ===  Reset DB
- name: re-deploy the DB file
  include: restore_database.yml
  when: instance_action in ["restore_snapshot", "reset_db", "reset_war_and_db"]


# make sure there is no war file (should already be expanded and owned by root)
- name: delete the war file
  file:
    path: "{{ storage }}/instances/{{ instance.name }}/tomcat/webapps/{{ instance.name }}.war"
    state: absent
  ignore_errors: yes
  when: instance_action in ["start", "restart"]


# === Start instance ==========
# start the instance
- name: start the instance
  systemd:
    state: started
    enabled: yes
    name: dhis2-{{ instance.name }}
  ignore_errors: yes
  when: instance_action in ["start", "reset_war", "restore_snapshot", "reset_db", "reset_war_and_db", "develop_mode_on", "develop_mode_off"]


# === Restart instance ==========
# restart the instance if running
- name: restart the instance
  systemd:
    state: restarted
    enabled: yes
    name: dhis2-{{ instance.name }}
  ignore_errors: yes
  when: instance_action == "restart"


# === Ensure correct nginx config for instance
- name: Ensure nginx config is pointing at instance
  blockinfile:
    path: "/etc/nginx/dhis2_instances"
    block: |
        location /{{ instance.name }} {
            proxy_pass                http://127.0.0.1:{{ iport }}/{{ instance.name }};
            proxy_redirect            off;
            proxy_set_header          Host               $host;
            proxy_set_header          X-Real-IP          $remote_addr;
            proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header          X-Forwarded-Proto  https;
            #proxy_cache               dhis;
        }
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ instance.name }}"
    state: "{{ instance.state }}"
  vars:
    iport: "{{ instance.tomcat_port|int + 200 if rate_limit_check.stat.exists else instance.tomcat_port }}"
  notify: reload nginx
  when: instance_action in ["restart", "start", "start", "reset_war", "restore_snapshot", "reset_db", "reset_war_and_db", "develop_mode_off"]

- name: reload nginx
  systemd:
    state: reloaded
    name: nginx

# === Run analytics if we have reset the DB
- name: wait for instance {{ inventory_hostname }}/{{ instance.name }} to start in order to run analytics
  uri:
    url: https://{{ inventory_hostname }}/{{ 'dev/' if dev_mode_check.stat.islnk is defined else '' }}{{ instance.name }}/api/resourceTables/analytics
    method: POST
    user: "{{ dhis2_admin_user }}"
    password: "{{ dhis2_admin_user_password }}"
    force_basic_auth: yes
    status_code: 200
  register: result
  until: result.status in [200, 401]
  retries: 12
  delay: 10
  when: (instance_action in ["restore_snapshot", "reset_db", "reset_war_and_db"]) and
        (((not project) and instance.db_demo is defined and instance.db_demo|length != 0) or
        (project in ["sierra-leone","who-metadata", "lmis"]))
  ignore_errors: yes


# === Wait until we can reach the instance before finishing the job
- name: ensure instance {{ inventory_hostname }}/{{ instance.name }}/api is up before finishing job
  uri:
    url: https://{{ inventory_hostname }}/{{ 'dev/' if dev_mode_check.stat.islnk is defined else '' }}{{ instance.name }}/dhis-web-commons/security/login.action
    method: GET
    status_code: 200
  register: result
  until: result.status in [200, 401]
  retries: 30
  delay: 10
  when: instance_action in ["restart", "start", "start", "reset_war", "restore_snapshot", "reset_db", "reset_war_and_db", "develop_mode_on", "develop_mode_off"]


# === Run API requests if we have reset the DB ==============
- name: Run API requests
  include: api_prepare_calls.yml
  when: (instance_action in ["reset_db", "reset_war_and_db", "reset_war", "restart", "start"])  and
        API_REQUESTS is defined and ( API_REQUESTS | length != 0) and
        dhis2_api_requests is defined and ( dhis2_api_requests | length != 0)


# === repair flyway if necessary  (flyway.repair_before_migration=true)
- name: remove flyway repair flag
  lineinfile:
    path: "{{ storage }}/instances/{{ instance.name }}/home/dhis.conf"
    regexp: '^flyway.repair_before_migration'
    line: flyway.repair_before_migration=false
