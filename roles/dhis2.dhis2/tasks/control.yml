---
- debug:
    msg: "{{ instance }}"

- name: set the instance locations
  set_fact:
    dhis2_filestore: "{{ instance.filestore | default(local_filestore) }}"

- name: set the instance locations
  set_fact:
    storage: "{{ storage_path | default('/var/lib') }}"
    dhis2_filestore: "{{ instance.filestore | default(local_filestore) }}"
    fs_type: "{{ dhis2_filestore.type }}"

# === Stop instance ==========
# stop the instance if running
- name: stop the instance
  systemd:
    state: stopped
    name: dhis2-{{ instance.name }}
  ignore_errors: yes
  when: instance_action == "stop"

- name: add redirect to nginx config
  blockinfile:
    path: "/etc/nginx/conf.d/default.conf"
    block: |
        location /{{ instance.name }} {
            rewrite ^ /{{ instance.name }}_stopped/ ;
        }
        location /{{ instance.name }}_stopped {
            alias /usr/share/nginx/html;
            index stopped.html break;
        }
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ instance.name }}"
    insertbefore: "# END DHIS2-INSTANCES:"
    state: "{{ instance.state }}"
  notify: reload nginx
  when: instance_action == "stop"

# ===  Reset WAR
- name: re-deploy the war file
  include: deploy_war.yml
  when: instance_action in ["reset_war", "reset_war_and_db"]


# ===  Reset WAR
- name: re-deploy the war file
  include: restore_database.yml
  when: instance_action in ["reset_db", "reset_war_and_db"]


# === Start instance ==========
# start the instance
- name: start the instance
  systemd:
    state: started
    name: dhis2-{{ instance.name }}
  ignore_errors: yes
  when: instance_action in ["start", "reset_war", "reset_db", "reset_war_and_db"]


# === Restart instance ==========
# restart the instance if running
- name: restart the instance
  systemd:
    state: restarted
    name: dhis2-{{ instance.name }}
  ignore_errors: yes
  when: instance_action == "restart"


# === Ensure correct nginx config for instance
- name: Ensure nginx config is pointing at instance
  blockinfile:
    path: "/etc/nginx/conf.d/default.conf"
    block: |
        location /{{ instance.name }} {
            proxy_pass                http://127.0.0.1:{{ instance.tomcat_port }}/{{ instance.name }};
            proxy_redirect            off;
            proxy_set_header          Host               $host;
            proxy_set_header          X-Real-IP          $remote_addr;
            proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header          X-Forwarded-Proto  https;
            #proxy_cache               dhis;
        }
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ instance.name }}"
    insertbefore: "# END DHIS2-INSTANCES:"
    state: "{{ instance.state }}"
  notify: reload nginx
  when: instance_action in ["restart", "start", "start", "reset_war", "reset_db", "reset_war_and_db"]

- name: reload nginx
  systemd:
    state: reloaded
    name: nginx

# === Run analytics if we have reset the DB
- name: wait for instance {{ inventory_hostname }}/{{ instance.name }} to start in order to run analytics
  uri:
    url: https://{{ inventory_hostname }}/{{ instance.name }}/api/resourceTables/analytics
    method: POST
    user: "{{ dhis2_admin_user }}"
    password: "{{ dhis2_admin_user_password }}"
    force_basic_auth: yes
    status_code: 200
  register: result
  until: result.status == 200
  retries: 40
  delay: 10
  when: instance_action in ["reset_db", "reset_war_and_db"]

# === Wait until we can reach the instance before finishing the job
- name: ensure instance {{ inventory_hostname }}/{{ instance.name }}/api is up before finishing job
  uri:
    url: https://{{ inventory_hostname }}/{{ instance.name }}/dhis-web-commons-stream/ping.action
    method: GET
    user: "{{ dhis2_admin_user }}"
    password: "{{ dhis2_admin_user_password }}"
    force_basic_auth: yes
    status_code: 200
  register: result
  until: result.status == 200
  retries: 40
  delay: 10
  when: instance_action in ["restart", "start", "start", "reset_war", "reset_db", "reset_war_and_db"]
