---
- hosts: "{{ instance_host }}"
  strategy: free
  become: yes

  vars_files:
    # include the vars mapping dhis2 war to demo db version
    - vars/demomap.yml

  pre_tasks:
    # create custom fact file if not existing
    - name: "Create custom fact directory"
      file:
        path: "/etc/ansible/facts.d"
        state: "directory"
    - name: "Insert custom fact file"
      template:
        src: "files/dhis2public.fact.j2"
        dest: /etc/ansible/facts.d/dhis2public.fact
        mode: 0755
    - name: "Re-run setup to use custom facts"
      setup: ~
    - debug:
        msg: "{{ ansible_local.dhis2public.instances }}"

    # - name: Ensure Pip is installed.
    #   package: name="python3-pip" state=present

    - pip:
        name: botocore
    - pip:
        name: boto3

  tasks:

    # check that the instance_name exists on the host
    - name: check instance name
      set_fact:
        instance_exists: "{{ single_instance.name }}"
      loop: "{{ ansible_local.dhis2public.instances|default([]) }}"
      loop_control:
        loop_var: single_instance
      when:
        - single_instance.name is regex(instance_name, match_type='fullmatch')

    - name: fail the play if there is no matching instance
      fail:
        msg: "Cannot find an instance matching the instance_name '{{ instance_name }}' on host {{ instance_host }}."
      when: instance_exists is undefined


    # remove the instance
    - name: remove dhis2 instance
      include_role:
        name: dhis2.dhis2
        tasks_from: remove_instance.yml
      loop: "{{ ansible_local.dhis2public.instances|default([]) }}"
      loop_control:
        loop_var: single_instance
      vars:
        instance: "{{ single_instance|combine({ 'state': 'absent'}) }}"
      when:
        - single_instance.name is regex(instance_name, match_type='fullmatch')
        - instance_action == 'remove'

    - name: check for snapshot
      block:
        - name: Get available snapshots from S3
          aws_s3:
            aws_access_key: "{{ aws_access_key }}"
            aws_secret_key: "{{ aws_secret_key }}"
            bucket: dhis2-database-backups
            mode: list
            prefix: "{{ ansible_host }}/{{ instance_name }}/"
          register: s3_list

        - name: Get most recent snapshot
          set_fact:
            s3_snapshot: "{{ s3_list.s3_keys[-1] }}"
          when: s3_list.s3_keys

        - fail: msg="Bailing out. There are no snapshots to restore"
          when: s3_snapshot is undefined or s3_snapshot|length == 0
      when: instance_action == 'restore_snapshot'

    # start, stop, restart, reset(DB, war, both), save_snapshot, commit_db
    - name: control dhis2 instance {{ instance_action }}
      include_role:
        name: dhis2.dhis2
        tasks_from: control.yml
      loop: "{{ ansible_local.dhis2public.instances|default([]) }}"
      loop_control:
        loop_var: single_instance
      vars:
        instance: "{{ single_instance | combine({'war_file': new_war_file}) }}"
      when:
        - single_instance.name is regex(instance_name, match_type='fullmatch')
        - instance_action  != 'remove'
        - new_war_file is defined and new_war_file|length != 0

    # start, stop, restart, reset(DB, war, both), save_snapshot, commit_db
    - name: control dhis2 instance {{ instance_action }}
      include_role:
        name: dhis2.dhis2
        tasks_from: control.yml
      loop: "{{ ansible_local.dhis2public.instances|default([]) }}"
      loop_control:
        loop_var: single_instance
      vars:
        instance: "{{ single_instance }}"
      when:
        - single_instance.name is regex(instance_name, match_type='fullmatch')
        - instance_action  != 'remove'
        - new_war_file is not defined or new_war_file|length == 0
